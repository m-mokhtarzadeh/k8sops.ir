<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Session 6 on Kubernetes Operations Documents</title><link>https://k8sops.ir/session6/</link><description>Recent content in Session 6 on Kubernetes Operations Documents</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Jan 2023 16:37:00 +0000</lastBuildDate><atom:link href="https://k8sops.ir/session6/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a simple Pod in Kubernetes</title><link>https://k8sops.ir/session6/simple_pod/</link><pubDate>Sat, 14 Jan 2023 16:37:00 +0000</pubDate><guid>https://k8sops.ir/session6/simple_pod/</guid><description> The following example is a simple manifest to create Pod.
apiVersion: v1 kind: Pod metadata: name: app spec: containers: - name: app image: nginx You can create a file with .yml extension and paste the above yml manifest and use kubectl to create a simple Nginx Pod resource.
kubectl apply -f pod-example.yml You can also create the above resource directly from the site content.
kubectl apply -f https://k8sops.ir/session6/pod-example.yml</description></item><item><title>Exposing port from simple Pod in Kubernetes</title><link>https://k8sops.ir/session6/expose_port/</link><pubDate>Sat, 14 Jan 2023 16:36:00 +0000</pubDate><guid>https://k8sops.ir/session6/expose_port/</guid><description>The following example is a simple manifest to create Pod and expose port.
apiVersion: v1 kind: Pod metadata: name: app spec: containers: - name: app image: nginx # Following lines were added ports: - name: http containerPort: 80 You can create a file with .yml extension and paste the above yml manifest and use kubectl to create a simple Nginx Pod resource.
kubectl apply -f expose-port-example.yml You can also create the above resource directly from the site content.</description></item><item><title>Explaining Pod manifest structure</title><link>https://k8sops.ir/session6/expain_pod_manifest/</link><pubDate>Sat, 14 Jan 2023 16:35:00 +0000</pubDate><guid>https://k8sops.ir/session6/expain_pod_manifest/</guid><description> Every Kubernetes resource manifest inlude following sections
apiVersion kind metadata spec You can see some example bellow.
Pod example:
apiVersion: v1 kind: Pod metadata: name: app spec: containers: - name: app image: nginx Replicaset example:
apiVersion: apps/v1 kind: ReplicaSet metadata: name: nginx-deployment spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80</description></item><item><title>Checking Pod with liveness probe in Kubernetes</title><link>https://k8sops.ir/session6/liveness_probe/</link><pubDate>Sat, 14 Jan 2023 16:34:00 +0000</pubDate><guid>https://k8sops.ir/session6/liveness_probe/</guid><description>With liveness probe Kubernetes can check a container is still alive.
Following example is a HTTP Get liveness probe.
apiVersion: v1 kind: Pod metadata: name: app spec: containers: - name: app image: k8sops-pod-example ports: - containerPort: 80 # Following lines were added livenessProbe: httpGet: path: / port: 80 initialDelaySeconds: 15 Kubernetes can probe a container using one of the three mechanisms:
HTTP Get TCP Socket Exec initialDelaySeconds Kubernetes with this option will wait 15 seconds before executing the first probe.</description></item></channel></rss>